// Generated by CoffeeScript 1.4.0
(function() {
  var ActiveRecord, all, association, config_db, config_db_pool, connection, delete_, find, getRows, getTableName, get_data_all_where, inject_data, insert_value, my_rows_global, mysql, new_, save, save_association, update_value, uuid, where, _defineProperties;

  mysql = require('mysql');

  uuid = require('node-uuid');

  config_db = require('../database.json');

  config_db_pool = require('../database.json');

  connection = mysql.createConnection(config_db);

  my_rows_global = {};

  getRows = function(that, callback) {
    if (!(my_rows_global[that['config']['my_table_name']] != null) || my_rows_global[that['config']['my_table_name']].length === 0) {
      connection.query('SHOW COLUMNS FROM ' + that['config']['my_table_name'], function(err, rows, fields) {
        my_rows_global[that['config']['my_table_name']] = rows;
        if (callback != null) {
          return callback();
        }
      });
    } else {
      if (callback != null) {
        callback();
        true;
      }
    }
    return true;
  };

  inject_data = function(that, data) {
    var k, length_row, rows_, v, _i;
    if (data != null) {
      rows_ = my_rows_global[that['config']['my_table_name']];
      length_row = rows_.length - 1;
      for (k = _i = 0; 0 <= length_row ? _i <= length_row : _i >= length_row; k = 0 <= length_row ? ++_i : --_i) {
        v = rows_[k];
        that[v['Field']] = data[v['Field']];
      }
    }
    return true;
  };

  _defineProperties = function(that) {
    var k, length_row, rows_, v, _fn, _i;
    rows_ = my_rows_global[that['config']['my_table_name']];
    length_row = rows_.length - 1;
    _fn = function(v) {
      var get_, set_;
      get_ = function() {
        return v['Field'];
      };
      set_ = function(val) {
        v['Field'] = val;
        return true;
      };
      return Object.defineProperty(that, v['Field'], {
        configurable: true,
        enumerable: true,
        get: get_,
        set: set_
      });
    };
    for (k = _i = 0; 0 <= length_row ? _i <= length_row : _i >= length_row; k = 0 <= length_row ? ++_i : --_i) {
      v = rows_[k];
      _fn(v);
    }
    return true;
  };

  getTableName = function() {
    return this['config']['my_table_name'];
  };

  association = function(that, callback) {
    var belongs, belongs_to, has_many, has_many_call, has_one, has_one_call, in_association_send, interval, key, key_name, length_belong, length_has_many, length_has_one, loading, many, model_lower, name_id, one, test_model, _i, _j, _k;
    if (callback == null) {
      callback = null;
    }
    loading = 0;
    belongs_to = that['config']['belongs_to'];
    has_many = that['config']['has_many'];
    has_one = that['config']['has_one'];
    name_id = that['config']['name_id'];
    length_belong = belongs_to.length - 1;
    if (length_belong >= 0) {
      for (key = _i = 0; 0 <= length_belong ? _i <= length_belong : _i >= length_belong; key = 0 <= length_belong ? ++_i : --_i) {
        belongs = belongs_to[key];
        test_model = new belongs['model']();
        key_name = belongs['key'];
        if (that['config']['in_association']['model'] === test_model.getTableName() && key_name === that['config']['in_association']['key_name'] && (that['config']['in_association']['type'] === 'has_many' || that['config']['in_association']['type'] === 'has_one')) {
          continue;
        }
        model_lower = belongs.name_row != null ? belongs.name_row : belongs['model_string'].toLowerCase();
        in_association_send = {
          model: that['config']['my_table_name'],
          type: 'belongs_to',
          key_name: key_name
        };
        that[model_lower] = new belongs['model'](null, in_association_send);
        if (that[key_name] !== null && that[key_name] !== void 0) {
          loading = loading + 1;
          that[model_lower].find(that[key_name], function() {
            return loading = loading - 1;
          });
        }
      }
    }
    length_has_many = has_many.length - 1;
    if (length_has_many >= 0) {
      for (key = _j = 0; 0 <= length_has_many ? _j <= length_has_many : _j >= length_has_many; key = 0 <= length_has_many ? ++_j : --_j) {
        many = has_many[key];
        model_lower = many.name_row != null ? many.name_row : many['model_string'].toLowerCase();
        key_name = many['key'];
        in_association_send = {
          model: that['config']['my_table_name'],
          type: 'has_many',
          key_name: key_name
        };
        has_many_call = new many['model'](null, in_association_send);
        if (that[name_id] !== null && that[name_id] !== void 0) {
          loading = loading + 1;
          has_many_call.where(key_name + '= ?', [that[name_id]], function(has_many_assoc) {
            loading = loading - 1;
            return that[model_lower] = has_many_assoc;
          });
        }
      }
    }
    length_has_one = has_one.length - 1;
    if (length_has_one >= 0) {
      for (key = _k = 0; 0 <= length_has_one ? _k <= length_has_one : _k >= length_has_one; key = 0 <= length_has_one ? ++_k : --_k) {
        one = has_one[key];
        test_model = new one['model']();
        if (that['config']['in_association']['model'] === test_model.getTableName() && that['config']['in_association']['type'] === 'belongs_to') {
          continue;
        }
        loading = true;
        model_lower = one.name_row != null ? one.name_row : one['model_string'].toLowerCase();
        key_name = one['key'];
        in_association_send = {
          model: that['config']['my_table_name'],
          type: 'has_one',
          key_name: key_name
        };
        has_one_call = new one['model'](null, in_association_send);
        if (that[name_id] !== null && that[name_id] !== void 0) {
          loading = loading + 1;
          has_one_call.where(key_name + '= ? LIMIT 0,1', [that[name_id]], function(has_one_assoc) {
            loading = loading - 1;
            return that[model_lower] = has_one_assoc[0];
          });
        }
      }
    }
    if (loading === 0) {
      return callback();
    } else {
      return interval = setInterval(function() {
        if (loading === 0) {
          clearInterval(interval);
          return callback();
        }
      }, 10);
    }
  };

  true;

  save_association = function() {};

  new_ = function(data, callback) {
    var that;
    that = this;
    return getRows(that, function() {
      inject_data(that, data);
      if (callback != null) {
        return callback();
      }
    });
  };

  save = function(save_obj) {
    var callback, that;
    if (save_obj == null) {
      save_obj = {};
    }
    that = this;
    if (!(my_rows_global[that['config']['my_table_name']] != null) || my_rows_global[that['config']['my_table_name']].length === 0) {
      getRows(that, function() {
        that.save();
        return true;
      });
      return true;
    }
    if ((save_obj != null) && (save_obj.data != null)) {
      inject_data(this, save_obj.data);
    }
    callback = null;
    if ((save_obj != null) && (save_obj.callback != null)) {
      callback = save_obj.callback;
    }
    if (!(that[that['config']['name_id']] != null)) {
      if (that['config']['is_uuid']) {
        that[that['config']['name_id']] = uuid.v1();
      }
      insert_value(that, callback);
    } else {
      update_value(that, callback);
    }
    return true;
  };

  find = function(id, callback) {
    var request_find, that;
    that = this;
    request_find = "SELECT * FROM " + that['config']['my_table_name'] + " WHERE " + that['config']['name_id'] + " = ?";
    return connection.query(request_find, [id], function(err, result) {
      var k, length_row, rows_, v, _i;
      if (result.length === 0) {
        throw "ERROR : This request :'" + request_find + "' return nothing";
      } else {
        rows_ = my_rows_global[that['config']['my_table_name']];
        length_row = rows_.length - 1;
        for (k = _i = 0; 0 <= length_row ? _i <= length_row : _i >= length_row; k = 0 <= length_row ? ++_i : --_i) {
          v = rows_[k];
          that[v['Field']] = result[0][v['Field']];
        }
        return association(that, callback);
      }
    });
  };

  all = function(callback) {
    var request_all, that;
    that = this;
    if (!(my_rows_global[that['config']['my_table_name']] != null) || my_rows_global[that['config']['my_table_name']].length === 0) {
      getRows(that, function() {
        return that.all(callback);
      });
      return true;
    }
    request_all = "SELECT * FROM " + that['config']['my_table_name'];
    if (that['config']['my_constraint'] !== '') {
      request_all = request_all + ' WHERE ' + that['config']['my_constraint'];
    }
    return connection.query("SELECT COUNT(*) AS count FROM " + that['config']['my_table_name'], function(err, result_count) {
      var count_data;
      count_data = result_count[0].count;
      return get_data_all_where(that, count_data, request_all, [], callback);
    });
  };

  where = function(condition, array_, callback) {
    var request_WHERE, request_WHERE_count, that;
    that = this;
    request_WHERE = ("SELECT * FROM " + that['config']['my_table_name'] + " WHERE ") + condition;
    request_WHERE_count = ("SELECT COUNT(*) as count FROM " + that['config']['my_table_name'] + " WHERE ") + condition;
    return connection.query(request_WHERE_count, array_, function(err, result_count) {
      var count_data;
      if (err) {
        throw err;
      }
      count_data = result_count[0].count;
      return get_data_all_where(that, count_data, request_WHERE, array_, callback);
    });
  };

  delete_ = function(callback) {
    var request_delete, that;
    that = this;
    request_delete = "DELETE FROM " + that['config']['my_table_name'] + " WHERE " + that['config']['name_id'] + " = ?";
    return connection.query(request_delete, [that[that['config']['name_id']]], function(err, result) {
      var k, name, v, value, _ref, _ref1, _ref2, _ref3;
      _ref = my_rows_global[that['config']['my_table_name']];
      for (k in _ref) {
        v = _ref[k];
        delete that[v['Field']];
      }
      _ref1 = that.config.belongs_to;
      for (k in _ref1) {
        value = _ref1[k];
        name = value.name_row != null ? value.name_row : value['model_string'].toLowerCase();
        delete that[name];
      }
      _ref2 = that.config.has_many;
      for (k in _ref2) {
        value = _ref2[k];
        name = value.name_row != null ? value.name_row : value['model_string'].toLowerCase();
        delete that[name];
      }
      _ref3 = that.config.has_one;
      for (k in _ref3) {
        value = _ref3[k];
        name = value.name_row != null ? value.name_row : value['model_string'].toLowerCase();
        delete that[name];
      }
      if (callback != null) {
        return callback();
      }
    });
  };

  get_data_all_where = function(that, count_data, request, array_data, callback) {
    var end, get_where, infos_rec, interval, key_r, loading, my_rows_, object_results, pool, special_query, _i;
    my_rows_ = my_rows_global[that['config']['my_table_name']];
    infos_rec = that['config']['infos_receive'];
    if (count_data > 0) {
      loading = count_data;
      object_results = [];
      config_db_pool['connectionLimit'] = 10000;
      config_db_pool['queueLimit'] = 10000;
      pool = mysql.createPool(config_db_pool);
      get_where = function(special_query) {
        return (function(special_query) {
          return setTimeout(function() {
            return pool.getConnection(function(err, connection__) {
              if (err) {
                throw err;
              }
              return connection__.query(special_query, array_data, function(err, results_) {
                var key, length_result, object, _callback, _i;
                length_result = results_.length - 1;
                for (key = _i = 0; 0 <= length_result ? _i <= length_result : _i >= length_result; key = 0 <= length_result ? ++_i : --_i) {
                  _callback = function() {
                    return loading = loading - 1;
                  };
                  object = new that.config['my_class_name'](results_[key], that.config.in_association, _callback);
                  object_results.push(object);
                }
                return connection__.end();
              });
            });
          }, 0);
        })(special_query);
      };
      if (count_data > 500) {
        end = Math.ceil(count_data / 3);
        for (key_r = _i = 0; 0 <= count_data ? _i <= count_data : _i >= count_data; key_r = _i += end) {
          special_query = request + ' LIMIT ' + key_r + ',' + end;
          get_where(special_query);
        }
      } else {
        get_where(request);
      }
      if (loading === 0) {
        return callback(object_results);
      } else {
        return interval = setInterval(function() {
          if (loading === 0) {
            clearInterval(interval);
            return callback(object_results);
          }
        }, 10);
      }
    } else {
      return callback([]);
    }
  };

  insert_value = function(that, callback) {
    var array_value, can_comma, data_varchar, date_now, insert_request, k, length_row, name_field, rows_, value, value_field, values_request, _i;
    insert_request = "INSERT INTO " + that['config']['my_table_name'] + " ( ";
    values_request = ' VALUES ( ';
    array_value = [];
    can_comma = false;
    rows_ = my_rows_global[that['config']['my_table_name']];
    length_row = rows_.length - 1;
    for (k = _i = 0; 0 <= length_row ? _i <= length_row : _i >= length_row; k = 0 <= length_row ? ++_i : --_i) {
      value = rows_[k];
      name_field = value['Field'];
      value_field = that[name_field];
      if (can_comma) {
        insert_request = insert_request + ', ';
        values_request = values_request + ', ';
      }
      if (name_field === that['config']['name_id']) {
        if (that['config']['is_uuid']) {
          can_comma = true;
          insert_request = insert_request + ' ' + name_field;
          values_request = values_request + ' ? ';
          array_value.push(value_field);
        }
      } else {
        can_comma = true;
        insert_request = insert_request + ' ' + name_field;
        values_request = values_request + ' ?';
        if ((value_field != null) && value_field !== '') {
          array_value.push(value_field);
        } else {
          if (value['Null'] === 'NO') {
            if (value['Type'] === 'datetime') {
              date_now = new Date();
              array_value.push(date_now);
              value_field = date_now;
            } else if (/^varchar/.test(value['Type'])) {
              data_varchar = '1';
              array_value.push(data_varchar);
              value_field = data_varchar;
            } else {
              array_value.push(value['Default']);
              value_field = value['Default'];
            }
          } else {
            array_value.push(value['Default']);
            value_field = value['Default'];
          }
        }
      }
    }
    insert_request = insert_request + ' ) ';
    values_request = values_request + ' ) ';
    insert_request = insert_request + values_request;
    return connection.query(insert_request, array_value, function(err, result) {
      if (err) {
        throw err;
      }
      if (callback != null) {
        return callback();
      }
    });
  };

  true;

  update_value = function(that, callback) {
    var array_value, can_comma, k, length_row, name_field, rows_, update_request, value, value_field, _i;
    update_request = "UPDATE " + that['config']['my_table_name'] + " SET ";
    array_value = [];
    can_comma = false;
    rows_ = my_rows_global[that['config']['my_table_name']];
    length_row = rows_.length - 1;
    for (k = _i = 0; 0 <= length_row ? _i <= length_row : _i >= length_row; k = 0 <= length_row ? ++_i : --_i) {
      value = rows_[k];
      value = rows_[k];
      name_field = value['Field'];
      value_field = that[name_field];
      if (can_comma) {
        update_request = update_request + ' , ';
      }
      if (name_field !== that['config']['name_id']) {
        can_comma = true;
        update_request = update_request + ' ' + name_field + ' = ?';
        array_value.push(value_field);
      }
    }
    update_request = update_request + ' WHERE ' + that['config']['name_id'] + ' = ?';
    array_value.push(that[that['config']['name_id']]);
    connection.query(update_request, array_value, function(err, result) {
      if (err) {
        throw err;
      }
      if (callback != null) {
        return callback();
      }
    });
    return true;
  };

  ActiveRecord = function(infos) {
    var init;
    init = function(that, infos) {
      var key, val, _ref, _results;
      if (infos == null) {
        infos = null;
      }
      Object.defineProperty(that, 'config', {
        value: new Object(),
        enumerable: false,
        configurable: true,
        writable: true
      });
      that['config'] = {
        infos_receive: infos,
        my_table_name: infos.table_name,
        my_class_name: infos.class_name,
        my_constraint: '',
        name_id: infos.name_id != null ? infos.name_id : 'id',
        is_uuid: (infos.id_is_uuid != null) && infos.id_is_uuid ? true : false,
        callback_init: infos.callback != null ? infos.callback : null,
        data_init: infos.data != null ? infos.data : null,
        row_modified: new Object(),
        in_association: new Object(),
        belongs_to: infos.belongs_to != null ? infos.belongs_to : [],
        has_many: infos.has_many != null ? infos.has_many : [],
        has_one: infos.has_one != null ? infos.has_one : []
      };
      if ((infos.in_association != null) && infos.in_association !== null) {
        that['config']['in_association'] = {
          model: infos.in_association.model,
          type: infos.in_association.type,
          key_name: infos.in_association.key_name
        };
      }
      if (that['config']['data_init'] !== null) {
        getRows(that, function() {
          inject_data(that, that['config']['data_init']);
          if (that['config']['callback_init'] !== null) {
            association(that, that['config']['callback_init']);
          } else {
            association(that, function() {});
          }
          return true;
        });
      } else {
        getRows(that, function() {
          if (that['config']['callback_init'] !== null) {
            return that['config']['callback_init']();
          }
        });
      }
      if ((infos.constraint != null) && typeof infos.constraint === 'object' && infos.constraint.length > 0) {
        _ref = infos.constraint;
        _results = [];
        for (key in _ref) {
          val = _ref[key];
          if (that['config']['my_constraint'] !== '') {
            that['config']['my_constraint'] += ' AND ';
          }
          _results.push(that['config']['my_constraint'] += ' ' + key + '="' + val + '" ');
        }
        return _results;
      }
    };
    init(this, infos);
    this.save = save;
    this.find = find;
    this.all = all;
    this.where = where;
    this["delete"] = delete_;
    this.getTableName = getTableName;
    this.create = new_;
    return this;
  };

  module.exports = ActiveRecord;

}).call(this);
