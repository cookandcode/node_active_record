// Generated by CoffeeScript 1.4.0
(function() {
  var ActiveRecord, Entreprises, Salaries, assert, should;

  assert = require("assert");

  should = require('should');

  ActiveRecord = require("ActiveRecord");

  Entreprises = function(data, in_association, callback) {
    if (data == null) {
      data = null;
    }
    if (in_association == null) {
      in_association = null;
    }
    if (callback == null) {
      callback = null;
    }
    return ActiveRecord.call(this, {
      table_name: 'entreprises',
      class_name: Entreprises,
      id_is_uuid: true,
      data: data,
      in_association: in_association,
      callback: callback,
      belongs_to: [
        {
          model: Salaries,
          model_string: 'Salaries',
          key: 'id_contact',
          name_row: 'big_boss'
        }
      ]
    });
  };

  Salaries = function(data, in_association, callback) {
    if (data == null) {
      data = null;
    }
    if (in_association == null) {
      in_association = null;
    }
    if (callback == null) {
      callback = null;
    }
    return ActiveRecord.call(this, {
      table_name: 'salaries',
      class_name: Salaries,
      id_is_uuid: true,
      data: data,
      in_association: in_association,
      callback: callback,
      has_many: [
        {
          model: Entreprises,
          model_string: 'Entreprises',
          key: 'id_contact',
          name_row: 'my_entreprise'
        }
      ],
      belongs_to: [
        {
          model: Salaries,
          model_string: 'Salaries',
          key: 'responsable',
          name_row: 'big_boss_ever'
        }
      ]
    });
  };

  describe('ActiveRecord', function() {
    describe('#init()', function() {
      return it('should init without error', function(done) {
        var active;
        active = new ActiveRecord({});
        return done();
      });
    });
    describe('#extend()', function() {
      return it('should extend without error', function(done) {
        var salarie;
        salarie = new Salaries();
        salarie.should.be.an["instanceof"](Salaries);
        return done();
      });
    });
    describe('#assocation', function() {
      return it('should return association without error', function(done) {
        var entreprise;
        entreprise = new Entreprises();
        return entreprise.find(1, function() {
          var big_boss;
          big_boss = entreprise.big_boss;
          big_boss.should.be.an["instanceof"](Salaries);
          return done();
        });
      });
    });
    describe('#save', function() {
      return it('should save object without error', function(done) {
        var entreprise;
        entreprise = new Entreprises();
        return entreprise.find(1, function() {
          var date, new_entreprise;
          date = new Date();
          entreprise.nom = 'test_' + date;
          entreprise.save();
          new_entreprise = new Entreprises();
          return new_entreprise.find(1, function() {
            new_entreprise.nom.should.equal('test_' + date);
            return done();
          });
        });
      });
    });
    describe('#save association', function() {
      return it('should save association object without error', function(done) {
        var entreprise;
        entreprise = new Entreprises();
        return entreprise.find(1, function() {
          var date, new_entreprise;
          date = new Date();
          entreprise.big_boss.nom = 'nom_' + date;
          entreprise.big_boss.save();
          new_entreprise = new Entreprises();
          return new_entreprise.find(1, function() {
            new_entreprise.big_boss.nom.should.equal('nom_' + date);
            return done();
          });
        });
      });
    });
    describe('#where', function() {
      return it('should find object with where', function(done) {
        var entreprise;
        entreprise = new Entreprises();
        return entreprise.where("id = ? AND nom LIKE ?", [1, '%test%'], function(entreprises_where) {
          if (entreprises_where.length > 0) {
            entreprises_where[0].should.be.an["instanceof"](Entreprises);
            return done();
          } else {
            return done();
          }
        });
      });
    });
    return describe('#all()', function() {
      return it('should find object with where', function(done) {
        var entreprise;
        entreprise = new Entreprises();
        return entreprise.where("id = ? AND nom LIKE ?", [1, '%test%'], function(entreprises_where) {
          if (entreprises_where.length > 0) {
            entreprises_where[0].should.be.an["instanceof"](Entreprises);
            return done();
          } else {
            return done();
          }
        });
      });
    });
  });

}).call(this);
